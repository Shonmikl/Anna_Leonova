Конечно, вот список задач на написание методов с использованием коллекций:

1. **Вывод значений `map`**: Напишите метод, который выводит все значения из `map`.
   * Вход: `Map<Integer, String> map`

2. **Добавление элементов в `set`**: Напишите метод, который добавляет 3 элемента в `set`.
   * Вход: `Set<Integer> set`

3. **Поиск по ключу**: Напишите метод, который возвращает значение из `map` по заданному ключу.
   * Вход: `Map<Integer, String> map`, `Integer key`

4. **Объединение `set` и `map`**: Напишите метод, который добавляет все ключи из `map` в `set`.
   * Вход: `Map<Integer, String> map`, `Set<Integer> set`

5. **Перебор `setMap`**: Напишите метод, который выводит все ключи и значения из `setMap`.
   * Вход: `Map<Set<Integer>, Set<String>> setMap`

6. **Удаление из `map`**: Напишите метод, который удаляет значение из `map` по заданному ключу.
   * Вход: `Map<Integer, String> map`, `Integer key`

7. **Поиск по значению**: Напишите метод, который проверяет, содержит ли `map` заданное значение.
   * Вход: `Map<Integer, String> map`, `String value`

8. **Перебор `maps`**: Напишите метод, который выводит все пары ключ-значение для каждой карты в `maps`.
   * Вход: `Set<Map<Integer, String>> maps`

9. **Фильтрация `map`**: Напишите метод, который возвращает новый `map`, содержащий только пары с ключами больше 5.
   * Вход: `Map<Integer, String> map`

10. **Вложенный перебор `setMap`**: Напишите метод, который для каждого ключа в `setMap` выводит все его значения.
   * Вход: `Map<Set<Integer>, Set<String>> setMap`

11. **Обратное добавление**: Напишите метод, который добавляет все значения из `map` в `set`.
   * Вход: `Map<Integer, String> map`, `Set<Integer> set`

12. **Объединение `maps`**: Напишите метод, который объединяет все карты из `maps` в одну карту.
   * Вход: `Set<Map<Integer, String>> maps`

13. **Подсчет элементов**: Напишите метод, который возвращает количество уникальных строк во всех `maps`.
   * Вход: `Set<Map<Integer, String>> maps`

14. **Фильтрация `setMap` по ключу**: Напишите метод, который возвращает новый `setMap`, содержащий только те ключи, которые содержат число 5.
   * Вход: `Map<Set<Integer>, Set<String>> setMap`

15. **Пересечение `map` и `set`**: Напишите метод, который возвращает новый `set`, содержащий только те числа, которые являются ключами в `map`.
   * Вход: `Map<Integer, String> map`, `Set<Integer> set`

16. **Реверс `map`**: Напишите метод, который возвращает новую карту, где ключи становятся значениями, а значения становятся ключами.
   * Вход: `Map<Integer, String> map`

17. **Максимальный ключ**: Напишите метод, который возвращает максимальный ключ из `map`.
   * Вход: `Map<Integer, String> map`

18. **Объединение всех значений**: Напишите метод, который объединяет все строки из всех карт в `maps` в одну строку.
   * Вход: `Set<Map<Integer, String>> maps`

19. **Поиск подстроки**: Напишите метод, который проверяет, содержится ли заданная подстрока хотя бы в одной строке в `map`.
   * Вход: `Map<Integer, String> map`, `String substring`

20. **Отображение `set` в `map`**: Напишите метод, который создает новую карту, где каждое число из `set` становится ключом, а его строковое представление становится значением.
   * Вход: `Set<Integer> set`

21. **Фильтрация `setMap` по значению**: Напишите метод, который возвращает новый `setMap`, где все значения содержат заданную строку.
   * Вход: `Map<Set<Integer>, Set<String>> setMap`, `String value`

22. **Группировка по длине**: Напишите метод, который группирует строки из `map` по их длине и возвращает карту, где ключ — это длина строки, а значение — множество строк этой длины.
   * Вход: `Map<Integer, String> map`

23. **Пересечение `setMap`**: Напишите метод, который возвращает пересечение всех ключей в `setMap`.
   * Вход: `Map<Set<Integer>, Set<String>> setMap`

24. **Уникальные значения из `maps`**: Напишите метод, который возвращает множество всех уникальных значений из всех карт в `maps`.
   * Вход: `Set<Map<Integer, String>> maps`

25. **Минимизация `map`**: Напишите метод, который возвращает `map`, содержащий только пары, где строка содержит менее 5 символов.
   * Вход: `Map<Integer, String> map`

26. **Сортировка `map` по значению**: Напишите метод, который возвращает отсортированный `map` по значениям в алфавитном порядке.
   * Вход: `Map<Integer, String> map`

27. **Глубокое сравнение `maps`**: Напишите метод, который определяет, содержат ли две карты из `maps` одни и те же пары ключ-

значение.
   * Вход: `Set<Map<Integer, String>> maps`

28. **Поиск наиболее частого значения**: Напишите метод, который определяет, какое значение в `map` встречается чаще всего.
   * Вход: `Map<Integer, String> map`

29. **Объединение `setMap` по значению**: Напишите метод, который объединяет все ключи из `setMap`, которые имеют одинаковое множество значений, в один общий ключ.
   * Вход: `Map<Set<Integer>, Set<String>> setMap`

30. **Создание инвертированного `setMap`**: Напишите метод, который создает новый `setMap`, где ключи становятся значениями и наоборот.
   * Вход: `Map<Set<Integer>, Set<String>> setMap`